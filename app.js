const difficulties = ["easy", "medium", "hard", "extreme"];
const defaultDir = "ImagesChampPixel/DefaultChampsPixel";
const skinDir = "ImagesChampPixel/SkinChampsPixel";


// helper pour extraire le nom des fichiers d'un listing HTML
async function extractFilenames(response) {
  const text = await response.text();

  // Trouve tous les fichiers d‚Äôimages (.png, .jpg, .jpeg)
  const matches = [...text.matchAll(/href="([^"]+\.(png|jpg|jpeg))"/gi)];
  const filenames = matches.map(m => m[1].replace(/\\/g, "/"));

  return filenames.filter(name =>
    !name.endsWith("/") && !name.includes("Parent Directory")
  );
}

// -----------------------------
// üîß SERVICE WORKER & PWA
// -----------------------------
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./sw.js')
      .then(() => console.log('SW registered'))
      .catch(err => console.error('SW failed', err));
  });
}
// --- √âV√âNEMENT INSTALLATION ---
window.addEventListener("beforeinstallprompt", (e) => {
  e.preventDefault();
  deferredPrompt = e;
  showInstallModalIfNeeded();
  
});

// --- VARIABLES ---
let deferredPrompt;
const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
const modal = document.getElementById("install-modal");
const btnAndroid = document.getElementById("tab-android");
const btnIOS = document.getElementById("tab-ios");
const contentAndroid = document.getElementById("content-android");
const contentIOS = document.getElementById("content-ios");
const closeModal = document.getElementById("close-modal");
const installBtn = document.getElementById('install-btn');

// --- FERMETURE POPIN ---
closeModal.addEventListener("click", () => closeInstallModal());

function closeInstallModal() {
  // Lance l‚Äôanimation fade-out
  modal.classList.add("fade-out");

  // Attends la fin de l‚Äôanimation avant de cacher compl√®tement
  const duration = 200; // m√™me dur√©e que dans @keyframes
  setTimeout(() => {
    modal.classList.add("hidden");
    modal.classList.remove("fade-out"); // reset
  }, duration);
}

// --- SWITCH ONGLET ---
btnAndroid.addEventListener("click", () => {
  showAndroidModal()
});

btnIOS.addEventListener("click", () => {
  showIOSModal()
});

window.addEventListener("click", (event) => {
  if (!modal.classList.contains("hidden") && event.target === modal) {
    closeInstallModal()
  }
});

// --- FONCTION : v√©rifier si l'app est d√©j√† install√©e ---
function isAppInstalled() {
  return window.matchMedia('(display-mode: standalone)').matches
      || window.navigator.standalone === true; // iOS Safari
}

function showAndroidModal() {
    modal.classList.remove('hidden');
    btnAndroid.classList.add("active");
    btnIOS.classList.remove("active");
    contentAndroid.classList.remove("hidden");
    contentIOS.classList.add("hidden");
}

function showIOSModal() {
    modal.classList.remove('hidden');
    btnIOS.classList.add("active");
    btnAndroid.classList.remove("active");
    contentIOS.classList.remove("hidden");
    contentAndroid.classList.add("hidden");
}

// --- FONCTION : afficher la popin si besoin ---
function showInstallModalIfNeeded() {
  // Si l'app est d√©j√† install√©e, ne rien faire
  if (isAppInstalled()) return;

  // --- Android / navigateur supportant beforeinstallprompt ---
  if (deferredPrompt && isReady) {
    showAndroidModal()
    return;
  }

  // --- iOS (Safari) ---
  if (isIOS) {
    showIOSModal()
    return;
  }
}

// --- BOUTON INSTALLATION ---
if (installBtn) {
  installBtn.addEventListener('click', async () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();   // lance l'installation PWA
      const choice = await deferredPrompt.userChoice;
      if (choice.outcome === 'accepted') {
        console.log('App install√©e !');
      }
      deferredPrompt = null;
      modal.classList.add('hidden'); // fermer la popin apr√®s installation
    } else {
      alert("Non non pas comme √ßa, suis plut√¥t les √©tapes de l'onglet 'IOS Apple'");
    }
  });
}

// -----------------------------
// üîπ Initialisation Pyodide
// -----------------------------
let pyodide;
let isReady = false;

// Cr√©e et affiche un loader une seule fois
function showLoader(message) {
  // Tableau de messages possibles
  const messages = ["Mise en place de singes dans ta prochaine game...","Bannisement du yasuo en 0/10/0...","-24pl et +15pl, et oui c'est la vie.","DEMACIAAAAA !","Nerfing de Mordekaiser...","Road to challenger...","Exclusion du jeu des joueurs range top...","Nunu support meilleur pick...","Petite pause apr√®s une s√©rie de d√©faite...","Leagues of Draven !","Ici √ßa mange du pixel au p'ti dej...","Ahhh, voil√† mon puant pr√©f√©r√©...","LoL > Famille & amis","LoL - douche + s√©rie de d√©faites = fou du bus"];

  // Si aucun message n‚Äôest pass√©, on en choisit un au hasard
  const messageToShow = message || messages[Math.floor(Math.random() * messages.length)];

  let loader = document.getElementById("loader");
  if (!loader) {
    loader = document.createElement("div");
    loader.id = "loader";
    loader.innerHTML = `
      <div class="loader-spinner"></div>
      <p id="loader-text">${messageToShow}</p>
    `;
    document.body.appendChild(loader);
  } else {
    document.getElementById("loader-text").textContent = messageToShow;
  }
}

// Supprime le loader
function hideLoader() {
  const loader = document.getElementById("loader");
  if (loader) loader.remove()
}



// Initialise Pyodide et charge ton module Python
async function initializePyodide() {
  try {
    console.log("‚ôæÔ∏è Chargement de Pyodide...");
    pyodide = await loadPyodide({
      indexURL: "https://cdn.jsdelivr.net/pyodide/v0.23.4/full/"
    });

    // Charger tes scripts Python
    const responseGame = await fetch("game.py");
    const codeGame = await responseGame.text();
    pyodide.FS.writeFile("game.py", codeGame);

    const responseData = await fetch("game_data.py");
    const codeData = await responseData.text();
    pyodide.FS.writeFile("game_data.py", codeData);

    // Importer ton module
    await pyodide.runPythonAsync("import game");

    isReady = true;
    console.log("‚ôæÔ∏è Pyodide pr√™t !");
  } catch (err) {
    console.error("‚ùå Erreur lors de l'initialisation de Pyodide :", err);
  }
}

window.pyodideReadyPromise = initializePyodide();
window.pyodide = pyodide;
let championsList = [];

// Initialisation compl√®te de l‚Äôapp
async function initializeApp() {
  try {
    showLoader();  // 1Ô∏è‚É£ affiche le loader
    pyodide = await initializePyodide();

    const response = await fetch("champions_list.json");
    championsList = await response.json();

    hideLoader();  // 2Ô∏è‚É£ Pyodide pr√™t, on cache le loader
    isReady = true;

    // 3Ô∏è‚É£ afficher le modal d'installation apr√®s le loader
    showInstallModalIfNeeded();
  } catch (error) {
    console.error("‚ùå Erreur lors de l'initialisation :", error);
    showLoader("Erreur de chargement. Recharge la page.");
  }
}

// Bloquer les boutons tant que Pyodide n‚Äôest pas pr√™t
document.querySelectorAll("button").forEach(btn => {
  btn.addEventListener("click", async e => {
    if (!isReady) {
      alert("Patiente un peu, le moteur Python se charge !");
      return;
    }
  });
});
initializeApp();


// -----------------------------
// üéÆ NAVIGATION
// -----------------------------
// index.js
document.addEventListener("DOMContentLoaded", () => {
  const cards = document.querySelectorAll(".difficulty-card");
  const includeSkinsCheckbox = document.getElementById('include-skins');

  // Charger la pr√©f√©rence
  const savedPreference = localStorage.getItem('includeSkins');
  if (savedPreference !== null) includeSkinsCheckbox.checked = savedPreference === 'true';

  includeSkinsCheckbox.addEventListener('change', () => {
    localStorage.setItem('includeSkins', includeSkinsCheckbox.checked);
  });

  cards.forEach(card => {
    card.addEventListener("click", () => {
      const difficulty = card.dataset.difficulty;
      const includeSkin = includeSkinsCheckbox.checked ? "True" : "False";
      console.log("üëâ Clic d√©tect√© :", difficulty, includeSkin); // S‚Äôaffiche avant navigation
      window.location.href = `mode_infini?difficulty=${difficulty}&includeSkin=${includeSkin}`;
    });
  });
});

// -----------------------------
// üî§ SUGGESTIONS LIVE
// -----------------------------


function setupLiveSuggestions(inputId, suggestionsId, onValidate) {
  const champInput = document.getElementById(inputId);
  const suggestions = document.getElementById(suggestionsId);
  let focusedIndex = -1;

  champInput.addEventListener("input", () => {
    const query = champInput.value.toLowerCase().trim();
    suggestions.innerHTML = "";

    // üîπ Masquer si aucun texte
    if (!query) {
      suggestions.style.display = "none";
      focusedIndex = -1;
      return;
    }

    const matches = championsList.filter(c => c.toLowerCase().includes(query));

    // üîπ Masquer si aucune correspondance
    if (!matches.length) {
      suggestions.style.display = "none";
      focusedIndex = -1;
      return;
    }

    // üîπ Affiche les suggestions
    matches.forEach(m => {
      const div = document.createElement("div");
      div.textContent = m;
      div.classList.add("suggestion-item");

      div.addEventListener("click", () => {
        champInput.value = m;
        suggestions.innerHTML = "";
        suggestions.style.display = "none";
        onValidate(m);
      });

      suggestions.appendChild(div);
    });

    // üîπ Focus sur le premier √©l√©ment par d√©faut
    focusedIndex = 0;
    updateFocus();
    suggestions.style.display = "block";
  });

  champInput.addEventListener("keydown", (e) => {
    const items = suggestions.querySelectorAll(".suggestion-item");
    if (!items.length) return;

    if (e.key === "ArrowDown") {
      e.preventDefault();
      focusedIndex = (focusedIndex + 1) % items.length;
      updateFocus();
    } else if (e.key === "ArrowUp") {
      e.preventDefault();
      focusedIndex = (focusedIndex - 1 + items.length) % items.length;
      updateFocus();
    } else if (e.key === "Enter") {
      e.preventDefault();
      const selectedChampion = items[focusedIndex]?.textContent;
      if (selectedChampion) {
        champInput.value = selectedChampion;
        suggestions.innerHTML = "";
        suggestions.style.display = "none";
        onValidate(selectedChampion);
      }
    }
  });

  // üîπ G√®re le focus visuel + scroll automatique
  function updateFocus() {
    const items = suggestions.querySelectorAll(".suggestion-item");
    items.forEach((item, idx) => {
      const isFocused = idx === focusedIndex;
      item.classList.toggle("focused", isFocused);
      if (isFocused) {
        item.scrollIntoView({
          behavior: "smooth",
          block: "nearest"
        });
      }
    });
  }
}

//setupLiveSuggestions("champ-input-challenge", "suggestions-challenge", (value) => {
//  checkChampionGuess(value, "challenge");
//});


// -----------------------------
// üèÅ VALIDATION
// -----------------------------
// normalisation simple (supprime accents, met en minuscule)
function normalizeStr(s) {
  return String(s || '')
    .normalize('NFD')                     // d√©compose les accents
    .replace(/[\u0300-\u036f]/g, '')      // supprime les diacritiques
    .replace(/\s+/g, ' ')                 // √©crase espaces multiples
    .trim()
    .toLowerCase();
}

/**
 * Validate a guess.
 * mode: 'infinite' (default) or 'challenge' -> chooses which UI elements to update
 * Returns true if correct, false otherwise.
 */
function checkChampionGuess(guess, mode = 'infinite') {
  guess = String(guess || '').trim();
  if (!guess) return false;

  const resultDiv = mode === 'infinite'
    ? document.getElementById("result")
    : document.getElementById("feedback-challenge");

  const inputEl = mode === 'infinite'
    ? document.getElementById("champ-input")
    : document.getElementById("champ-input-challenge");

  const suggestionsEl = mode === 'infinite'
    ? document.getElementById("suggestions")
    : document.getElementById("suggestions-challenge");

  if (!currentChampion) return false;

  const normalizedGuess = normalizeStr(guess);
  const normalizedChampion = normalizeStr(currentChampion);

  const champImg = mode === 'infinite'
    ? document.getElementById("champ-image")
    : document.getElementById("champ-image-challenge");

  // Nettoie l'input / suggestions
  if (inputEl) inputEl.value = "";
  if (normalizedGuess === normalizedChampion) {
    // ‚úÖ Bonne r√©ponse
    if (resultDiv) {
      resultDiv.textContent = "‚úÖ Correct !";
      resultDiv.style.color = "limegreen";
      resultDiv.classList.add("visible");
    }

    if (suggestionsEl) {
      suggestionsEl.innerHTML = "";
      suggestionsEl.style.display = "none";
    }

    // Affiche la solution si disponible
    if (champImg && currentSoluce) {
      champImg.src = currentSoluce;
    }

    // üîπ attend 1s puis charge l'image suivante et cache le feedback
    setTimeout(() => {
      resultDiv.classList.remove("visible");
      if (mode === 'infinite') {
        loadRandomImage("infinite");
      } else {
        loadRandomImage("challenge");
      }
    }, 1000);

    return true;
  } else {
    // ‚ùå Mauvaise r√©ponse
    if (resultDiv) {
      resultDiv.textContent = "‚ùå Faux !";
      resultDiv.style.color = "red";
      resultDiv.classList.add("visible");
    }

    setTimeout(() => {
      if (resultDiv) resultDiv.classList.remove("visible");
    }, 2000);

    return false;
  }
}

// INCLUDE SKIN IN MEMORY
// --- Gestion du choix "Inclure les skins" ---
const includeSkinsCheckbox = document.getElementById('include-skins');

// 1Ô∏è‚É£ Charger la pr√©f√©rence au d√©marrage
const savedPreference = localStorage.getItem('includeSkins');
if (savedPreference !== null) {
  includeSkinsCheckbox.checked = savedPreference === 'true';
}

// 2Ô∏è‚É£ Sauvegarder √† chaque changement
includeSkinsCheckbox.addEventListener('change', () => {
  localStorage.setItem('includeSkins', includeSkinsCheckbox.checked);
});

// Gestion du Timer
function startTimer() {
  const timerElement = document.getElementById("timer");
  secondsElapsed = 0;
  clearInterval(timerInterval);

  timerInterval = setInterval(() => {
    secondsElapsed++;
    const minutes = Math.floor(secondsElapsed / 60);
    const seconds = secondsElapsed % 60;
    timerElement.textContent = `‚è±Ô∏è ${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }, 1000);
}

function stopTimer() {
  clearInterval(timerInterval);
  document.getElementById("timer").textContent = "‚è±Ô∏è 00:00";
}